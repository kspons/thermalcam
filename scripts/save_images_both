#! /usr/bin/python
import rospy
from sensor_msgs.msg import Image
from sensor_msgs.msg import NavSatFix
from cv_bridge import CvBridge, CvBridgeError
import cv2
import os
from datetime import datetime
import time
from shutil import copyfile
import subprocess
import numpy as np
bridge = CvBridge()

def ptg_callback(msg):
    try:
        # Convert your ROS Image message to OpenCV2
        ptg_img = bridge.imgmsg_to_cv2(msg, "bgr8")
    except CvBridgeError, e:
        print(e)
    else:
        # Save your OpenCV2 image as a jpeg 
        imagename_ptg   = 'ptgrey/' + str(rospy.get_rostime()) + '.jpeg'
        cv2.imwrite(imagename_ptg, ptg_img)

def therm_callback(msg):
	try:
		thm_img = bridge.imgmsg_to_cv2(msg, "bgr8")
	except CvBridgeError, e:
		print(e)
	else:
		imagename_thm = 'thermal/' + str(rospy.get_rostime()) + '.jpeg'
		cv2.imwrite(imagename_thm, thm_img)

def main():
    rospy.init_node('image_saver')
    rospy.Subscriber("/camera/image_raw", Image, ptg_callback)
    rospy.Subscriber("/thermalcam/image_raw", Image, therm_callback)
    rospy.spin()

if __name__ == '__main__':
    timevar = str(datetime.now().strftime("%Y-%m-%d_%H:%M:%S"))
    mypath = os.path.join("/home/kspons/Pictures/dronecapture", timevar)
    os.makedirs(mypath)
    os.chdir(mypath)
    os.makedirs(mypath + "/thermal")
    os.makedirs(mypath + "/ptgrey")
    print("\nImages are being saved at " + mypath + "\nPress Ctrl+C to exit")
    start = time.time()
    main()

def make_video():
	copyfile('/home/kspons/Desktop/Run/make_video', mypath+'/make_video')
	subprocess.call(["chmod", "+x", mypath+'/make_video'])
	print '\n'
	
rospy.on_shutdown(make_video)
